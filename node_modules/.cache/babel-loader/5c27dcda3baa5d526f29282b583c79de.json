{"ast":null,"code":"import _slicedToArray from\"C:/Users/Noah/Desktop/SE3316/lab2-nschofield2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import ReactDOM from'react-dom';import'./index.css';import'bootstrap/dist/css/bootstrap.css';import{Button}from'reactstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Cell(_ref){var value=_ref.value,onClick=_ref.onClick;return/*#__PURE__*/_jsx(Button,{onClick:onClick,children:value});}function GameBoard(){var _useState=useState(Array(42).fill(null)),_useState2=_slicedToArray(_useState,2),cells=_useState2[0],setCell=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isBlueTurn=_useState4[0],setBlueTurn=_useState4[1];var winner=calculateWinner(cells);//renders the connect-4 game board\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[renderCell(0),renderCell(1),renderCell(2),renderCell(3),renderCell(4),renderCell(5),renderCell(6)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderCell(7),renderCell(8),renderCell(9),renderCell(10),renderCell(11),renderCell(12),renderCell(13)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderCell(14),renderCell(15),renderCell(16),renderCell(17),renderCell(18),renderCell(19),renderCell(20)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderCell(21),renderCell(22),renderCell(23),renderCell(24),renderCell(25),renderCell(26),renderCell(27)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderCell(28),renderCell(29),renderCell(30),renderCell(31),renderCell(32),renderCell(33),renderCell(34)]}),/*#__PURE__*/_jsxs(\"div\",{children:[renderCell(35),renderCell(36),renderCell(37),renderCell(38),renderCell(39),renderCell(40),renderCell(41)]}),/*#__PURE__*/_jsx(\"div\",{children:isGameWon()})]});function renderCell(val){return/*#__PURE__*/_jsx(Cell,{value:cells[val],onClick:function onClick(){var duplicateCells=cells.slice(0,41);if(duplicateCells[val]===null&&winner===null){//checks if the cell has not been clicked and that no one has won yet\nduplicateCells[val]=isBlueTurn?'X':'O';//sets the value of a duplicate cell to either 'X' or 'O' depending on who's turn it is\nsetCell(duplicateCells);//sets the value of the actual cell\nsetBlueTurn(!isBlueTurn);//changes turns\n}}});}function isGameWon(){if(winner!=null){//if someone won the game\nreturn\"Winner: \"+winner;//output the winner\n}}}ReactDOM.render(/*#__PURE__*/_jsx(GameBoard,{}),document.getElementById('root'));function calculateWinner(cells){//all possible winning combos in an array\nvar posCombos=[[0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],[7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],[14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],[21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],[28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],[35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],[0,7,14,21],[7,14,21,28],[14,21,28,35],[1,8,15,22],[8,15,22,29],[15,22,29,36],[2,9,16,23],[9,16,23,30],[16,23,30,37],[3,10,17,24],[10,17,24,31],[17,24,31,38],[4,11,18,25],[11,18,25,32],[18,25,32,39],[5,12,19,26],[12,19,26,33],[19,26,33,40],[6,13,20,27],[13,20,27,34],[20,27,34,41]];for(var x=0;x<posCombos.length;x++){//scans through entire possible win combination array\nvar _posCombos$x=_slicedToArray(posCombos[x],4),a=_posCombos$x[0],b=_posCombos$x[1],c=_posCombos$x[2],d=_posCombos$x[3];//creates an array out of an element of the possible win combination \nif(cells[a]&&cells[a]===cells[b]&&cells[a]===cells[c]&&cells[a]===cells[d]){//if all cells belong to the same team-\nreturn cells[a];//return the winning team's name-\n}}return null;//return null if there is no winner yet\n}","map":{"version":3,"sources":["C:/Users/Noah/Desktop/SE3316/lab2-nschofield2/src/index.js"],"names":["React","useState","ReactDOM","Button","Cell","value","onClick","GameBoard","Array","fill","cells","setCell","isBlueTurn","setBlueTurn","winner","calculateWinner","renderCell","isGameWon","val","duplicateCells","slice","render","document","getElementById","posCombos","x","length","a","b","c","d"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button } from 'reactstrap';\n\nfunction Cell({value, onClick}) {\n  return (\n      <Button onClick={onClick}>\n        {value}\n      </Button>\n  )\n}\n\nfunction GameBoard () {\n  const[cells, setCell] = useState(Array(42).fill(null));\n  const[isBlueTurn, setBlueTurn] = useState(true);\n  const winner = calculateWinner(cells);\n\n  //renders the connect-4 game board\n    return (\n      <div> \n        <div>\n          {renderCell(0)}\n          {renderCell(1)}\n          {renderCell(2)}\n          {renderCell(3)}\n          {renderCell(4)}\n          {renderCell(5)}\n          {renderCell(6)}\n        </div>\n        <div>\n          {renderCell(7)}\n          {renderCell(8)}\n          {renderCell(9)}\n          {renderCell(10)}\n          {renderCell(11)}\n          {renderCell(12)}\n          {renderCell(13)}\n        </div>\n        <div>\n          {renderCell(14)}\n          {renderCell(15)}\n          {renderCell(16)}\n          {renderCell(17)}\n          {renderCell(18)}\n          {renderCell(19)}\n          {renderCell(20)}\n        </div>\n        <div>\n          {renderCell(21)}\n          {renderCell(22)}\n          {renderCell(23)}\n          {renderCell(24)}\n          {renderCell(25)}\n          {renderCell(26)}\n          {renderCell(27)}\n        </div>\n        <div>\n          {renderCell(28)}\n          {renderCell(29)}\n          {renderCell(30)}\n          {renderCell(31)}\n          {renderCell(32)}\n          {renderCell(33)}\n          {renderCell(34)}\n        </div>\n        <div>\n          {renderCell(35)}\n          {renderCell(36)}\n          {renderCell(37)}\n          {renderCell(38)}\n          {renderCell(39)}\n          {renderCell(40)}\n          {renderCell(41)}\n        </div>\n        <div>{isGameWon()}</div>\n      </div>\n    )\n\n    function renderCell(val) {\n      return (\n        <Cell value = {cells[val]} onClick={() => {\n          const duplicateCells = cells.slice(0, 41);\n\n          if (duplicateCells[val] === null && winner === null) { //checks if the cell has not been clicked and that no one has won yet\n            duplicateCells[val] = isBlueTurn ? 'X' : 'O'; //sets the value of a duplicate cell to either 'X' or 'O' depending on who's turn it is\n            setCell(duplicateCells); //sets the value of the actual cell\n            setBlueTurn(!isBlueTurn) //changes turns\n          }\n\n        }}/>\n      )\n    }\n\n    function isGameWon() {\n      if (winner != null) { //if someone won the game\n        return \"Winner: \" + winner; //output the winner\n      }\n    }\n}\n\nReactDOM.render(\n    <GameBoard/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(cells) {\n  //all possible winning combos in an array\n  const posCombos = [\n    \n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    \n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    \n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    \n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    \n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    \n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    \n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n   \n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    \n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    \n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    \n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    \n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    \n    [6,13,20,27],[13,20,27,34],[20,27,34,41]\n  ];\n\n  for (let x = 0; x < posCombos.length; x++) { //scans through entire possible win combination array\n    const [a, b, c, d] = posCombos[x]; //creates an array out of an element of the possible win combination \n    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c] && cells[a] === cells[d]) { //if all cells belong to the same team-\n      return cells[a]; //return the winning team's name-\n    }\n  }\n  return null; //return null if there is no winner yet\n}\n"]},"metadata":{},"sourceType":"module"}