{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noah\\\\Desktop\\\\SE3316\\\\lab2-nschofield2\\\\SE3316-react\\\\3316-react\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cell({\n  value,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: onClick,\n    children: [value, \"style=\", {\n      backgroundColor: 'RED'\n    }]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Cell;\n\nfunction GameBoard() {\n  _s();\n\n  const [cells, setCell] = useState(Array(42).fill(null));\n  const [isBlueTurn, setBlueTurn] = useState(true);\n  const winner = calculateWinner(cells);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [renderCell(0), renderCell(1), renderCell(2), renderCell(3), renderCell(4), renderCell(5), renderCell(6)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [renderCell(7), renderCell(8), renderCell(9), renderCell(10), renderCell(11), renderCell(12), renderCell(13)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [renderCell(14), renderCell(15), renderCell(16), renderCell(17), renderCell(18), renderCell(19), renderCell(20)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [renderCell(21), renderCell(22), renderCell(23), renderCell(24), renderCell(25), renderCell(26), renderCell(27)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [renderCell(28), renderCell(29), renderCell(30), renderCell(31), renderCell(32), renderCell(33), renderCell(34)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [renderCell(35), renderCell(36), renderCell(37), renderCell(38), renderCell(39), renderCell(40), renderCell(41)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isGameWon()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n\n  function renderCell(val) {\n    return /*#__PURE__*/_jsxDEV(Cell, {\n      value: cells[val],\n      onClick: () => {\n        const duplicateCells = cells.slice();\n\n        if (duplicateCells[val] === null && winner === null) {\n          duplicateCells[val] = isBlueTurn ? 'X' : 'O';\n          setCell(duplicateCells);\n          setBlueTurn(!isBlueTurn);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this);\n  }\n\n  function isGameWon() {\n    if (winner != null) {\n      return \"Winner: \" + winner;\n    }\n  }\n}\n\n_s(GameBoard, \"fScXTBIkeLB5mcPLHA2AekYHB48=\");\n\n_c2 = GameBoard;\nReactDOM.render( /*#__PURE__*/_jsxDEV(GameBoard, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 104,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(cells) {\n  const posCombos = [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [7, 8, 9, 10], [8, 9, 10, 11], [9, 10, 11, 12], [10, 11, 12, 13], [14, 15, 16, 17], [15, 16, 17, 18], [16, 17, 18, 19], [17, 18, 19, 20], [21, 22, 23, 24], [22, 23, 24, 25], [23, 24, 25, 26], [24, 25, 26, 27], [28, 29, 30, 31], [29, 30, 31, 32], [30, 31, 32, 33], [31, 32, 33, 34], [35, 36, 37, 38], [36, 37, 38, 39], [37, 38, 39, 40], [38, 39, 40, 41], [0, 7, 14, 21], [7, 14, 21, 28], [14, 21, 28, 35], [1, 8, 15, 22], [8, 15, 22, 29], [15, 22, 29, 36], [2, 9, 16, 23], [9, 16, 23, 30], [16, 23, 30, 37], [3, 10, 17, 24], [10, 17, 24, 31], [17, 24, 31, 38], [4, 11, 18, 25], [11, 18, 25, 32], [18, 25, 32, 39], [5, 12, 19, 26], [12, 19, 26, 33], [19, 26, 33, 40], [6, 13, 20, 27], [13, 20, 27, 34], [20, 27, 34, 41]];\n\n  for (let x = 0; x < posCombos.length; x++) {\n    //scans through entire possible win combination array\n    const [a, b, c, d] = posCombos[x]; //creates an array out of an element of the possible win combination \n\n    if (cells[a] === cells[b] && cells[a] === cells[c] && cells[a] === cells[d]) {\n      //if all cells belong to the same team\n      return cells[a]; //return the winning team's name\n    }\n  }\n\n  return null; //return null if there is no winner yet\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"GameBoard\");","map":{"version":3,"sources":["C:/Users/Noah/Desktop/SE3316/lab2-nschofield2/SE3316-react/3316-react/src/index.js"],"names":["React","useState","ReactDOM","Button","Cell","value","onClick","backgroundColor","GameBoard","cells","setCell","Array","fill","isBlueTurn","setBlueTurn","winner","calculateWinner","renderCell","isGameWon","val","duplicateCells","slice","render","document","getElementById","posCombos","x","length","a","b","c","d"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button } from 'reactstrap';\n\nfunction Cell({value, onClick}) {\n  return (\n      <Button onClick={onClick}>\n        {value}\n        style={{backgroundColor: 'RED'}}\n      </Button>\n  )\n}\n\nfunction GameBoard () {\n  const[cells, setCell] = useState(Array(42).fill(null));\n  const[isBlueTurn, setBlueTurn] = useState(true);\n  const winner = calculateWinner(cells);\n\n    return (\n      <div>\n        <div>\n          {renderCell(0)}\n          {renderCell(1)}\n          {renderCell(2)}\n          {renderCell(3)}\n          {renderCell(4)}\n          {renderCell(5)}\n          {renderCell(6)}\n        </div>\n        <div>\n          {renderCell(7)}\n          {renderCell(8)}\n          {renderCell(9)}\n          {renderCell(10)}\n          {renderCell(11)}\n          {renderCell(12)}\n          {renderCell(13)}\n        </div>\n        <div>\n          {renderCell(14)}\n          {renderCell(15)}\n          {renderCell(16)}\n          {renderCell(17)}\n          {renderCell(18)}\n          {renderCell(19)}\n          {renderCell(20)}\n        </div>\n        <div>\n          {renderCell(21)}\n          {renderCell(22)}\n          {renderCell(23)}\n          {renderCell(24)}\n          {renderCell(25)}\n          {renderCell(26)}\n          {renderCell(27)}\n        </div>\n        <div>\n          {renderCell(28)}\n          {renderCell(29)}\n          {renderCell(30)}\n          {renderCell(31)}\n          {renderCell(32)}\n          {renderCell(33)}\n          {renderCell(34)}\n        </div>\n        <div>\n          {renderCell(35)}\n          {renderCell(36)}\n          {renderCell(37)}\n          {renderCell(38)}\n          {renderCell(39)}\n          {renderCell(40)}\n          {renderCell(41)}\n        </div>\n        <div>{isGameWon()}</div>\n      </div>\n    )\n\n    function renderCell(val) {\n      return (\n        <Cell value = {cells[val]} onClick={() => {\n          const duplicateCells = cells.slice();\n\n          if (duplicateCells[val] === null && winner === null) {\n            duplicateCells[val] = isBlueTurn ? 'X' : 'O';\n            setCell(duplicateCells);\n            setBlueTurn(!isBlueTurn)\n          }\n\n        }}/>\n      )\n    }\n\n    function isGameWon() {\n      if (winner != null) {\n        return \"Winner: \" + winner;\n      }\n    }\n}\n\nReactDOM.render(\n    <GameBoard/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(cells) {\n  const posCombos = [\n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    [6,13,20,27],[13,20,27,34],[20,27,34,41]\n  ];\n\n  for (let x = 0; x < posCombos.length; x++) { //scans through entire possible win combination array\n    const [a, b, c, d] = posCombos[x]; //creates an array out of an element of the possible win combination \n    if (cells[a] === cells[b] && cells[a] === cells[c] && cells[a] === cells[d]) { //if all cells belong to the same team\n      return cells[a]; //return the winning team's name\n    }\n  }\n  return null; //return null if there is no winner yet\n}\n"]},"metadata":{},"sourceType":"module"}