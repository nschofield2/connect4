{"version":3,"sources":["index.js"],"names":["Cell","value","onClick","GameBoard","useState","Array","fill","cells","setCell","isBlueTurn","setBlueTurn","winner","posCombos","x","length","a","b","c","d","calculateWinner","renderCell","isGameWon","val","duplicateCells","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.502c617d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button } from 'reactstrap';\n\nfunction Cell({value, onClick}) {\n  return (\n      <Button onClick={onClick}>\n        {value}\n      </Button>\n  )\n}\n\nfunction GameBoard () {\n  const[cells, setCell] = useState(Array(42).fill(null));\n  const[isBlueTurn, setBlueTurn] = useState(true);\n  const winner = calculateWinner(cells);\n\n  //renders the connect-4 game board\n    return (\n      <div> \n        <div>\n          {renderCell(0)}\n          {renderCell(1)}\n          {renderCell(2)}\n          {renderCell(3)}\n          {renderCell(4)}\n          {renderCell(5)}\n          {renderCell(6)}\n        </div>\n        <div>\n          {renderCell(7)}\n          {renderCell(8)}\n          {renderCell(9)}\n          {renderCell(10)}\n          {renderCell(11)}\n          {renderCell(12)}\n          {renderCell(13)}\n        </div>\n        <div>\n          {renderCell(14)}\n          {renderCell(15)}\n          {renderCell(16)}\n          {renderCell(17)}\n          {renderCell(18)}\n          {renderCell(19)}\n          {renderCell(20)}\n        </div>\n        <div>\n          {renderCell(21)}\n          {renderCell(22)}\n          {renderCell(23)}\n          {renderCell(24)}\n          {renderCell(25)}\n          {renderCell(26)}\n          {renderCell(27)}\n        </div>\n        <div>\n          {renderCell(28)}\n          {renderCell(29)}\n          {renderCell(30)}\n          {renderCell(31)}\n          {renderCell(32)}\n          {renderCell(33)}\n          {renderCell(34)}\n        </div>\n        <div>\n          {renderCell(35)}\n          {renderCell(36)}\n          {renderCell(37)}\n          {renderCell(38)}\n          {renderCell(39)}\n          {renderCell(40)}\n          {renderCell(41)}\n        </div>\n        <div>{isGameWon()}</div>\n      </div>\n    )\n\n    function renderCell(val) {\n      return (\n        <Cell value = {cells[val]} onClick={() => {\n          const duplicateCells = cells.slice(0, 41);\n\n          if (duplicateCells[val] === null && winner === null) { //checks if the cell has not been clicked and that no one has won yet\n            duplicateCells[val] = isBlueTurn ? 'X' : 'O'; //sets the value of a duplicate cell to either 'X' or 'O' depending on who's turn it is\n            setCell(duplicateCells); //sets the value of the actual cell\n            setBlueTurn(!isBlueTurn) //changes turns\n          }\n\n        }}/>\n      )\n    }\n\n    function isGameWon() {\n      if (winner != null) { //if someone won the game\n        return \"Winner: \" + winner; //output the winner\n      }\n    }\n}\n\nReactDOM.render(\n    <GameBoard/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(cells) {\n  //all possible winning combos in an array\n  const posCombos = [\n    \n    [0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6],\n    \n    [7,8,9,10],[8,9,10,11],[9,10,11,12],[10,11,12,13],\n    \n    [14,15,16,17],[15,16,17,18],[16,17,18,19],[17,18,19,20],\n    \n    [21,22,23,24],[22,23,24,25],[23,24,25,26],[24,25,26,27],\n    \n    [28,29,30,31],[29,30,31,32],[30,31,32,33],[31,32,33,34],\n    \n    [35,36,37,38],[36,37,38,39],[37,38,39,40],[38,39,40,41],\n    \n    [0,7,14,21],[7,14,21,28],[14,21,28,35],\n   \n    [1,8,15,22],[8,15,22,29],[15,22,29,36],\n    \n    [2,9,16,23],[9,16,23,30],[16,23,30,37],\n    \n    [3,10,17,24],[10,17,24,31],[17,24,31,38],\n    \n    [4,11,18,25],[11,18,25,32],[18,25,32,39],\n    \n    [5,12,19,26],[12,19,26,33],[19,26,33,40],\n    \n    [6,13,20,27],[13,20,27,34],[20,27,34,41]\n  ];\n\n  for (let x = 0; x < posCombos.length; x++) { //scans through entire possible win combination array\n    const [a, b, c, d] = posCombos[x]; //creates an array out of an element of the possible win combination \n    if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c] && cells[a] === cells[d]) { //if all cells belong to the same team-\n      return cells[a]; //return the winning team's name-\n    }\n  }\n  return null; //return null if there is no winner yet\n}\n"],"sourceRoot":""}